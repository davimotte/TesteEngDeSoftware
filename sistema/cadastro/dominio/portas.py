from abc import ABC, abstractmethod
from typing import List, Optional
from .entidades import Terapeuta, Paciente, Familiar

class ITerapeutasRepo(ABC):
    @abstractmethod
    def criar(self, t: Terapeuta) -> Terapeuta: ...
    @abstractmethod
    def obter(self, id_: int) -> Terapeuta: ...
    @abstractmethod
    def listar(self) -> List[Terapeuta]: ...
    @abstractmethod
    def atualizar(self, t: Terapeuta) -> Terapeuta: ...
    @abstractmethod
    def excluir(self, id_: int) -> None: ...
    @abstractmethod
    def existe_email(self, email: str, ignorar_id: Optional[int]=None) -> bool: ...

class IPacientesRepo(ABC):
    @abstractmethod
    def criar(self, p: Paciente) -> Paciente: ...
    @abstractmethod
    def obter(self, id_: int) -> Paciente: ...
    @abstractmethod
    def listar(self) -> List[Paciente]: ...
    @abstractmethod
    def atualizar(self, p: Paciente) -> Paciente: ...
    @abstractmethod
    def excluir(self, id_: int) -> None: ...

class IFamiliaresRepo(ABC):
    @abstractmethod
    def criar(self, f: Familiar) -> Familiar: ...
    @abstractmethod
    def obter(self, id_: int) -> Familiar: ...
    @abstractmethod
    def listar(self) -> List[Familiar]: ...
    @abstractmethod
    def atualizar(self, f: Familiar) -> Familiar: ...
    @abstractmethod
    def excluir(self, id_: int) -> None: ...
    @abstractmethod
    def existe_email(self, email: str, ignorar_id: Optional[int]=None) -> bool: ...
